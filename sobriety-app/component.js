const { useState, useEffect, useRef } = React;
const { 
    Heart, Calendar, BookOpen, Settings, Share2, Plus, X, ChevronLeft, 
    Music, Volume2, VolumeX, Play, Pause, Clock, Sparkles 
} = lucideReact;

export default function SobrietyApp() {
  const [startDate, setStartDate] = useStoredState('sobriety_start_date', null);
  const [notes, setNotes] = useStoredState('sobriety_notes', []);
  const [showSettings, setShowSettings] = useState(false);
  const [showNotes, setShowNotes] = useState(false);
  const [showAddNote, setShowAddNote] = useState(false);
  const [showMilestone, setShowMilestone] = useState(false);
  const [currentNote, setCurrentNote] = useState({ mood: 3, text: '' });
  const [newStartDate, setNewStartDate] = useState('');
  const [showResetConfirm, setShowResetConfirm] = useState(false);
  const [animate, setAnimate] = useState(false);
  const [showMeditation, setShowMeditation] = useState(false);
  const [activeMeditation, setActiveMeditation] = useState(null);
  const [meditationTime, setMeditationTime] = useState(0);
  const [isMeditating, setIsMeditating] = useState(false);
  const [soundEnabled, setSoundEnabled] = useStoredState('sound_enabled', true);
  const meditationTimerRef = useRef(null);
  const audioContextRef = useRef(null);

  const motivationalQuotes = [
    "–¢–∏ —Å–∏–ª—å–Ω—ñ—à–∏–π, –Ω—ñ–∂ —Ç–≤—ñ–π –≤—á–æ—Ä–∞—à–Ω—ñ–π —Å—Ç—Ä–∞—Ö",
    "–ö–æ–∂–µ–Ω –¥–µ–Ω—å ‚Äî —Ü–µ –ø–µ—Ä–µ–º–æ–≥–∞",
    "–¢–∏ –∑–∞—Å–ª—É–≥–æ–≤—É—î—à –Ω–∞ —Ü–µ –∂–∏—Ç—Ç—è",
    "–°—å–æ–≥–æ–¥–Ω—ñ —Ç–∏ –æ–±–∏—Ä–∞—î—à —Å–µ–±–µ",
    "–¢–≤–æ—è —Å–∏–ª–∞ ‚Äî —É —Ç–≤–æ—ó–π —Å—Ç—ñ–π–∫–æ—Å—Ç—ñ",
    "–û–¥–∏–Ω –¥–µ–Ω—å –∑–∞ —Ä–∞–∑ ‚Äî —Ü–µ –≤—Å–µ, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ",
    "–¢–∏ –≤–∂–µ –Ω–µ —Ç–æ–π, –∫–∏–º –±—É–≤ —É—á–æ—Ä–∞",
    "–ö–æ–∂–µ–Ω —Ä–∞–Ω–æ–∫ ‚Äî –Ω–æ–≤–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å",
    "–¢–∏ —Å—Ç–≤–æ—Ä—é—î—à —Å–≤–æ—î –º–∞–π–±—É—Ç–Ω—î",
    "–¢–≤–æ—î –∂–∏—Ç—Ç—è –≤–∞—Ä—Ç–µ —Ü—ñ—î—ó –±–æ—Ä–æ—Ç—å–±–∏"
  ];

  const milestoneMessages = {
    1: "–ü–µ—Ä—à–∏–π –¥–µ–Ω—å ‚Äî –Ω–∞–π–≤–∞–∂—á–∏–π. –¢–∏ –∑—Ä–æ–±–∏–≤(–ª–∞) —Ü–µ! üåü",
    7: "–¢–∏–∂–¥–µ–Ω—å —á–∏—Å—Ç–æ–≥–æ –∂–∏—Ç—Ç—è! –¢–∏ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–∏–π(–Ω–∞)! üå±",
    14: "–î–≤–∞ —Ç–∏–∂–Ω—ñ! –¢–≤–æ—î —Ç—ñ–ª–æ –¥—è–∫—É—î —Ç–æ–±—ñ üí™",
    30: "30 –î–ù–Ü–í! –¢–∏ –∑—Ä–æ–±–∏–≤(–ª–∞) —Ü–µ. –û–¥–∏–Ω –¥–µ–Ω—å –∑–∞ —Ä–∞–∑. üéâ",
    60: "2 –º—ñ—Å—è—Ü—ñ! –¶–µ –≤–∂–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ –¥–Ω—ñ ‚Äî —Ü–µ —Ç–≤–æ—î –Ω–æ–≤–µ –∂–∏—Ç—Ç—è üåä",
    90: "3 –º—ñ—Å—è—Ü—ñ! –¢–∏ –¥–æ–≤—ñ–≤(–ª–∞), —â–æ –º–æ–∂–µ—à –≤—Å–µ üèîÔ∏è",
    180: "–ü—ñ–≤—Ä–æ–∫—É! –°–≤—ñ—Ç–ª–æ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ç–µ–±–µ —Å—Ç–∞—î —Å–∏–ª—å–Ω—ñ—à–∏–º ‚ú®",
    365: "–†–Ü–ö! –¢–∏ –Ω–∞—Ä–æ–¥–∏–≤—Å—è(–ª–∞—Å—è) –∑–∞–Ω–æ–≤–æ. –í—ñ—Ç–∞—î–º–æ! ü¶Ö"
  };

  const calculateDays = () => {
    if (!startDate) return 0;
    const start = new Date(startDate);
    const today = new Date();
    const diffTime = Math.abs(today - start);
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
  };

  const days = calculateDays();
  const todayQuote = motivationalQuotes[days % motivationalQuotes.length];
  const progress = Math.min((days / 365) * 100, 100);

  useEffect(() => {
    if (days > 0 && milestoneMessages[days]) {
      setShowMilestone(true);
      setAnimate(true);
      playMilestoneSound();
      setTimeout(() => setAnimate(false), 1000);
    }
  }, [days]);

  useEffect(() => {
    if (isMeditating && activeMeditation) {
      meditationTimerRef.current = setInterval(() => {
        setMeditationTime(prev => {
          if (prev >= activeMeditation.duration * 60) {
            stopMeditation();
            return 0;
          }
          return prev + 1;
        });
      }, 1000);
    } else {
      if (meditationTimerRef.current) {
        clearInterval(meditationTimerRef.current);
      }
    }
    return () => {
      if (meditationTimerRef.current) {
        clearInterval(meditationTimerRef.current);
      }
    };
  }, [isMeditating, activeMeditation]);

  const startMeditation = (meditation) => {
    setActiveMeditation(meditation);
    setMeditationTime(0);
    setIsMeditating(true);
    playNotificationSound();
  };

  const stopMeditation = () => {
    setIsMeditating(false);
    if (meditationTime >= (activeMeditation?.duration || 0) * 60) {
      playMilestoneSound();
    }
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const handleStartJourney = () => {
    const date = newStartDate || new Date().toISOString().split('T')[0];
    setStartDate(date);
    setShowSettings(false);
  };

  const handleReset = () => {
    setStartDate(null);
    setNotes([]);
    setShowResetConfirm(false);
    setShowSettings(false);
  };

  const handleAddNote = () => {
    const newNote = {
      date: new Date().toISOString().split('T')[0],
      day: days,
      mood: currentNote.mood,
      text: currentNote.text,
      timestamp: Date.now()
    };
    setNotes([newNote, ...notes]);
    setCurrentNote({ mood: 3, text: '' });
    setShowAddNote(false);
    playNotificationSound();
  };

  const moodEmojis = ['üò¢', 'üòî', 'üòê', 'üôÇ', 'üòä'];

  const meditations = [
    {
      id: 1,
      title: '–†–∞–Ω–∫–æ–≤–µ –ø—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è',
      duration: 5,
      description: '–ü–æ—á–Ω–∏ –¥–µ–Ω—å —ñ–∑ —Å–ø–æ–∫–æ—î–º —ñ —è—Å–Ω—ñ—Å—Ç—é',
      icon: 'üåÖ'
    },
    {
      id: 2,
      title: '–î–∏—Ö–∞–Ω–Ω—è —Å–ø–æ–∫–æ—é',
      duration: 10,
      description: '–ì–ª–∏–±–æ–∫–µ –¥–∏—Ö–∞–Ω–Ω—è –¥–ª—è –∑–Ω—è—Ç—Ç—è —Å—Ç—Ä–µ—Å—É',
      icon: 'üå¨Ô∏è'
    },
    {
      id: 3,
      title: '–ü–æ–¥–æ–ª–∞–Ω–Ω—è —Ç—è–≥–∏',
      duration: 7,
      description: '–ö–æ–ª–∏ –≤—ñ–¥—á—É–≤–∞—î—à —Å–ø–æ–∫—É—Å—É ‚Äî –∑—É–ø–∏–Ω–∏—Å—å',
      icon: 'üõ°Ô∏è'
    },
    {
      id: 4,
      title: '–í–µ—á—ñ—Ä–Ω—è –≥–∞—Ä–º–æ–Ω—ñ—è',
      duration: 15,
      description: '–ó–∞—Å–ø–æ–∫—ñ–π —Ä–æ–∑—É–º –ø–µ—Ä–µ–¥ —Å–Ω–æ–º',
      icon: 'üåô'
    },
    {
      id: 5,
      title: '–í–¥—è—á–Ω—ñ—Å—Ç—å',
      duration: 8,
      description: '–í—ñ–¥—á—É–π –ø–æ–¥—è–∫—É –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ',
      icon: '‚ú®'
    },
    {
      id: 6,
      title: '–°–∏–ª–∞ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ',
      duration: 12,
      description: '–ó–≤\'—è–∂–∏—Å—è –∑ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ—é —Å–∏–ª–æ—é',
      icon: 'üí™'
    }
  ];

  const playTone = (frequency, duration) => {
    if (!soundEnabled) return;
    try {
      const audioContext = audioContextRef.current || new (window.AudioContext || window.webkitAudioContext)();
      audioContextRef.current = audioContext;
      
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      
      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);
      
      oscillator.frequency.value = frequency;
      oscillator.type = 'sine';
      
      gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
      
      oscillator.start(audioContext.currentTime);
      oscillator.stop(audioContext.currentTime + duration);
    } catch (error) {
      console.log('Audio not supported');
    }
  };

  const playMilestoneSound = () => {
    playTone(523.25, 0.2);
    setTimeout(() => playTone(659.25, 0.2), 200);
    setTimeout(() => playTone(783.99, 0.4), 400);
  };

  const playNotificationSound = () => {
    playTone(440, 0.15);
    setTimeout(() => playTone(554.37, 0.15), 150);
  };

  if (!startDate) {
    return (
      <div className="w-full h-full bg-gradient-to-b from-gray-900 via-gray-800 to-gray-900 flex flex-col items-center justify-center p-8 relative overflow-hidden">
        <div className="absolute inset-0 opacity-20">
          <img 
            src="keys/sunrise-hope?prompt=cinematic%20sunrise%20breaking%20through%20darkness%20mountain%20silhouette%20golden%20light%20hope%20rebirth" 
            alt="" 
            className="w-full h-full object-cover"
          />
        </div>
        <div className="relative z-10 text-center space-y-8">
          <div className="w-32 h-32 mx-auto rounded-full bg-gradient-to-br from-emerald-400 to-teal-400 flex items-center justify-center shadow-2xl shadow-emerald-500/50 animate-pulse">
            <div className="w-28 h-28 rounded-full bg-gray-900 flex items-center justify-center">
              <div className="w-16 h-16 bg-gradient-to-t from-emerald-400 via-lime-300 to-white rounded-full opacity-80"></div>
            </div>
          </div>
          <h1 className="text-4xl font-black text-white tracking-tight">30 –î–ù–Ü–í<br/>–ë–ï–ó –ê–õ–ö–û–ì–û–õ–Æ</h1>
          <p className="text-xl text-gray-300 font-light max-w-sm mx-auto leading-relaxed">
            –¢–≤–æ—è –ø–æ–¥–æ—Ä–æ–∂ –¥–æ —Å–≤–æ–±–æ–¥–∏ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —Å—å–æ–≥–æ–¥–Ω—ñ
          </p>
          <div className="space-y-4 pt-4">
            <input
              type="date"
              value={newStartDate}
              onChange={(e) => setNewStartDate(e.target.value)}
              className="w-full px-6 py-4 bg-gray-800/50 border-2 border-emerald-500/30 rounded-2xl text-white text-center text-lg focus:outline-none focus:border-emerald-400 transition-all"
            />
            <button
              onClick={handleStartJourney}
              className="w-full px-8 py-5 bg-gradient-to-r from-emerald-500 to-teal-500 rounded-2xl text-white font-bold text-xl shadow-lg shadow-emerald-500/30 hover:shadow-emerald-500/50 transition-all hover:scale-105"
            >
              –ü–æ—á–∞—Ç–∏ –ø–æ–¥–æ—Ä–æ–∂
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (showMilestone && milestoneMessages[days]) {
    return (
      <div className="w-full h-full bg-gradient-to-b from-gray-900 via-emerald-900 to-gray-900 flex flex-col items-center justify-center p-8 relative overflow-hidden">
        <div className="absolute inset-0 opacity-30">
          <img 
            src="keys/milestone-celebration?prompt=golden%20light%20rays%20celebration%20ethereal%20particles%20victory%20triumph%20glory" 
            alt="" 
            className="w-full h-full object-cover"
          />
        </div>
        <div className={`relative z-10 text-center space-y-8 ${animate ? 'animate-bounce' : ''}`}>
          <div className="text-8xl font-black text-transparent bg-clip-text bg-gradient-to-r from-yellow-400 via-emerald-300 to-teal-400 animate-pulse">
            {days}
          </div>
          <div className="text-2xl font-light text-gray-300 uppercase tracking-wider">
            {days === 1 ? '–î–µ–Ω—å' : days < 5 ? '–î–Ω—ñ' : '–î–Ω—ñ–≤'}
          </div>
          <div className="max-w-md mx-auto text-2xl font-bold text-white leading-relaxed py-8">
            {milestoneMessages[days]}
          </div>
          <div className="flex gap-4 justify-center pt-8">
            <button
              onClick={() => setShowMilestone(false)}
              className="px-8 py-4 bg-gradient-to-r from-emerald-500 to-teal-500 rounded-2xl text-white font-bold shadow-lg shadow-emerald-500/30 hover:scale-105 transition-all"
            >
              –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏
            </button>
            <button
              className="px-8 py-4 bg-gray-800/50 border-2 border-emerald-500/30 rounded-2xl text-white font-bold hover:bg-gray-700/50 transition-all flex items-center gap-2"
            >
              <Share2 size={20} />
              –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (showSettings) {
    return (
      <div className="w-full h-full bg-gradient-to-b from-gray-900 to-gray-800 flex flex-col">
        <div className="p-6 border-b border-gray-700 flex items-center justify-between">
          <button onClick={() => setShowSettings(false)} className="text-gray-400 hover:text-white transition-colors">
            <ChevronLeft size={28} />
          </button>
          <h2 className="text-2xl font-bold text-white">–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</h2>
          <div className="w-7"></div>
        </div>
        <div className="flex-1 p-6 space-y-6 overflow-y-auto">
          <div className="bg-gray-800/50 rounded-2xl p-6 space-y-4">
            <h3 className="text-lg font-bold text-white">–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É</h3>
            <input
              type="date"
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
              className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-xl text-white focus:outline-none focus:border-emerald-400 transition-all"
            />
          </div>
          <div className="bg-gray-800/50 rounded-2xl p-6 space-y-4">
            <h3 className="text-lg font-bold text-white">–ó–≤—É–∫–æ–≤—ñ —Å–∏–≥–Ω–∞–ª–∏</h3>
            <button
              onClick={() => setSoundEnabled(!soundEnabled)}
              className="w-full px-6 py-4 bg-gray-700 border border-gray-600 rounded-xl text-white font-bold hover:bg-gray-600 transition-all flex items-center justify-between"
            >
              <span>–ó–≤—É–∫ {soundEnabled ? '—É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ'}</span>
              {soundEnabled ? <Volume2 size={24} /> : <VolumeX size={24} />}
            </button>
          </div>
          <div className="bg-gray-800/50 rounded-2xl p-6 space-y-4">
            <h3 className="text-lg font-bold text-white">–°–∫–∏–Ω—É—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫</h3>
            <p className="text-sm text-gray-400">–¶–µ –≤–∏–¥–∞–ª–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å —Ç–∞ –∑–∞–ø–∏—Å–∏</p>
            {!showResetConfirm ? (
              <button
                onClick={() => setShowResetConfirm(true)}
                className="w-full px-6 py-3 bg-red-500/20 border border-red-500/50 rounded-xl text-red-400 font-bold hover:bg-red-500/30 transition-all"
              >
                –°–∫–∏–Ω—É—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å
              </button>
            ) : (
              <div className="space-y-3">
                <p className="text-white font-bold text-center">–¢–∏ –≤–ø–µ–≤–Ω–µ–Ω–∏–π(–∞)?</p>
                <p className="text-sm text-gray-400 text-center">–¶–µ –Ω–µ –∫—ñ–Ω–µ—Ü—å. –¶–µ –¥–æ—Å–≤—ñ–¥. –ü–æ—á–Ω–∏ –∑–Ω–æ–≤—É.</p>
                <div className="flex gap-3">
                  <button
                    onClick={() => setShowResetConfirm(false)}
                    className="flex-1 px-4 py-3 bg-gray-700 rounded-xl text-white font-bold hover:bg-gray-600 transition-all"
                  >
                    –°–∫–∞—Å—É–≤–∞—Ç–∏
                  </button>
                  <button
                    onClick={handleReset}
                    className="flex-1 px-4 py-3 bg-red-500 rounded-xl text-white font-bold hover:bg-red-600 transition-all"
                  >
                    –¢–∞–∫, —Å–∫–∏–Ω—É—Ç–∏
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }

  if (showNotes) {
    return (
      <div className="w-full h-full bg-gradient-to-b from-gray-900 to-gray-800 flex flex-col">
        <div className="p-6 border-b border-gray-700 flex items-center justify-between">
          <button onClick={() => setShowNotes(false)} className="text-gray-400 hover:text-white transition-colors">
            <ChevronLeft size={28} />
          </button>
          <h2 className="text-2xl font-bold text-white">–ú–æ—ó –∑–∞–ø–∏—Å–∏</h2>
          <div className="w-7"></div>
        </div>
        <div className="flex-1 p-6 space-y-4 overflow-y-auto">
          {notes.length === 0 ? (
            <div className="text-center py-20">
              <BookOpen size={64} className="mx-auto text-gray-600 mb-4" />
              <p className="text-gray-500 text-lg">–ü–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤</p>
            </div>
          ) : (
            notes.map((note, index) => (
              <div key={index} className="bg-gray-800/50 rounded-2xl p-6 space-y-3 border border-gray-700">
                <div className="flex items-center justify-between">
                  <div className="text-sm text-gray-400">–î–µ–Ω—å {note.day}</div>
                  <div className="text-sm text-gray-500">{note.date}</div>
                </div>
                <div className="text-3xl">{moodEmojis[note.mood]}</div>
                {note.text && <p className="text-white leading-relaxed">{note.text}</p>}
              </div>
            ))
          )}
        </div>
      </div>
    );
  }

  if (showAddNote) {
    return (
      <div className="w-full h-full bg-gradient-to-b from-gray-900 to-gray-800 flex flex-col">
        <div className="p-6 border-b border-gray-700 flex items-center justify-between">
          <button onClick={() => setShowAddNote(false)} className="text-gray-400 hover:text-white transition-colors">
            <X size={28} />
          </button>
          <h2 className="text-2xl font-bold text-white">–ó–∞–ø–∏—Å–∞—Ç–∏ –¥–µ–Ω—å</h2>
          <div className="w-7"></div>
        </div>
        <div className="flex-1 p-6 space-y-8 overflow-y-auto">
          <div className="space-y-4">
            <h3 className="text-lg font-bold text-white text-center">–Ø–∫ —Ç–≤—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π?</h3>
            <div className="flex justify-between px-4">
              {moodEmojis.map((emoji, index) => (
                <button
                  key={index}
                  onClick={() => setCurrentNote({ ...currentNote, mood: index })}
                  className={`text-5xl transition-all ${currentNote.mood === index ? 'scale-125' : 'scale-100 opacity-50'}`}
                >
                  {emoji}
                </button>
              ))}
            </div>
          </div>
          <div className="space-y-4">
            <h3 className="text-lg font-bold text-white">–¢–≤–æ—ó –¥—É–º–∫–∏</h3>
            <textarea
              value={currentNote.text}
              onChange={(e) => setCurrentNote({ ...currentNote, text: e.target.value })}
              placeholder="–©–æ –≤—ñ–¥–±—É–≤–∞–ª–æ—Å—å —Å—å–æ–≥–æ–¥–Ω—ñ? –Ø–∫—ñ –±—É–ª–∏ –≤–∏–∫–ª–∏–∫–∏ —á–∏ –ø–µ—Ä–µ–º–æ–≥–∏?"
              className="w-full h-40 px-4 py-3 bg-gray-800/50 border border-gray-700 rounded-xl text-white placeholder-gray-500 focus:outline-none focus:border-emerald-400 transition-all resize-none"
            />
          </div>
          <button
            onClick={handleAddNote}
            className="w-full px-8 py-5 bg-gradient-to-r from-emerald-500 to-teal-500 rounded-2xl text-white font-bold text-xl shadow-lg shadow-emerald-500/30 hover:scale-105 transition-all"
          >
            –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–∞–ø–∏—Å
          </button>
        </div>
      </div>
    );
  }

  if (showMeditation) {
    if (activeMeditation && isMeditating) {
      const progress = (meditationTime / (activeMeditation.duration * 60)) * 100;
      const remaining = activeMeditation.duration * 60 - meditationTime;
      
      return (
        <div className="w-full h-full bg-gradient-to-b from-indigo-950 via-purple-900 to-gray-900 flex flex-col items-center justify-center p-8 relative overflow-hidden">
          <div className="absolute inset-0 opacity-20">
            <img 
              src="keys/meditation-peace?prompt=serene%20meditation%20peaceful%20zen%20calm%20water%20lotus%20tranquility%20mindfulness" 
              alt="" 
              className="w-full h-full object-cover"
            />
          </div>
          <div className="relative z-10 text-center space-y-12 w-full max-w-sm">
            <button
              onClick={stopMeditation}
              className="absolute top-0 right-0 text-gray-400 hover:text-white transition-colors"
            >
              <X size={32} />
            </button>
            
            <div className="text-6xl animate-pulse">{activeMeditation.icon}</div>
            <h2 className="text-3xl font-bold text-white">{activeMeditation.title}</h2>
            
            <div className="relative w-64 h-64 mx-auto">
              <svg className="w-full h-full transform -rotate-90">
                <circle
                  cx="128"
                  cy="128"
                  r="110"
                  stroke="rgba(139, 92, 246, 0.2)"
                  strokeWidth="8"
                  fill="none"
                />
                <circle
                  cx="128"
                  cy="128"
                  r="110"
                  stroke="url(#meditation-gradient)"
                  strokeWidth="8"
                  fill="none"
                  strokeDasharray={`${(progress / 100) * 691} 691`}
                  strokeLinecap="round"
                  className="transition-all duration-1000"
                />
                <defs>
                  <linearGradient id="meditation-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" stopColor="#8b5cf6" />
                    <stop offset="100%" stopColor="#ec4899" />
                  </linearGradient>
                </defs>
              </svg>
              <div className="absolute inset-0 flex flex-col items-center justify-center">
                <div className="text-5xl font-black text-white">{formatTime(remaining)}</div>
                <div className="text-sm text-gray-400 mt-2">–∑–∞–ª–∏—à–∏–ª–æ—Å—å</div>
              </div>
            </div>
            
            <div className="space-y-4">
              <div className="text-lg text-gray-300 leading-relaxed">
                –î–∏—Ö–∞–π –≥–ª–∏–±–æ–∫–æ. –¢–∏ –≤ –±–µ–∑–ø–µ—Ü—ñ. –¶–µ–π –º–æ–º–µ–Ω—Ç –Ω–∞–ª–µ–∂–∏—Ç—å —Ç–æ–±—ñ.
              </div>
              <button
                onClick={stopMeditation}
                className="px-8 py-3 bg-purple-500/20 border border-purple-500/50 rounded-xl text-purple-300 font-bold hover:bg-purple-500/30 transition-all"
              >
                <Pause size={20} className="inline mr-2" />
                –ó–∞–≤–µ—Ä—à–∏—Ç–∏
              </button>
            </div>
          </div>
        </div>
      );
    }

    return (
      <div className="w-full h-full bg-gradient-to-b from-gray-900 to-gray-800 flex flex-col">
        <div className="p-6 border-b border-gray-700 flex items-center justify-between">
          <button onClick={() => { setShowMeditation(false); setActiveMeditation(null); }} className="text-gray-400 hover:text-white transition-colors">
            <ChevronLeft size={28} />
          </button>
          <h2 className="text-2xl font-bold text-white">–ú–µ–¥–∏—Ç–∞—Ü—ñ—ó</h2>
          <div className="w-7"></div>
        </div>
        <div className="flex-1 p-6 space-y-6 overflow-y-auto">
          <div className="bg-gradient-to-br from-purple-900/30 to-indigo-900/30 rounded-2xl p-6 border border-purple-500/20">
            <Sparkles className="text-purple-400 mb-3" size={32} />
            <h3 className="text-xl font-bold text-white mb-2">–°–∏–ª–∞ –º–µ–¥–∏—Ç–∞—Ü—ñ—ó</h3>
            <p className="text-gray-300 leading-relaxed">–ú–µ–¥–∏—Ç–∞—Ü—ñ—è –¥–æ–ø–æ–º–∞–≥–∞—î –∑–∞—Å–ø–æ–∫–æ—ó—Ç–∏ —Ä–æ–∑—É–º, –ø–µ—Ä–µ–∂–∏—Ç–∏ –≤–∞–∂–∫—ñ –º–æ–º–µ–Ω—Ç–∏ —Ç–∞ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –≤–Ω—É—Ç—Ä—ñ—à–Ω—é –≥–∞—Ä–º–æ–Ω—ñ—é.</p>
          </div>
          
          <div className="space-y-4">
            {meditations.map((meditation) => (
              <button
                key={meditation.id}
                onClick={() => startMeditation(meditation)}
                className="w-full bg-gray-800/50 hover:bg-gray-700/50 border border-gray-700 rounded-2xl p-6 transition-all text-left group"
              >
                <div className="flex items-start gap-4">
                  <div className="text-4xl group-hover:scale-110 transition-transform">{meditation.icon}</div>
                  <div className="flex-1">
                    <h4 className="text-lg font-bold text-white mb-1">{meditation.title}</h4>
                    <p className="text-sm text-gray-400 mb-3">{meditation.description}</p>
                    <div className="flex items-center gap-2 text-purple-400">
                      <Clock size={16} />
                      <span className="text-sm font-medium">{meditation.duration} —Ö–≤–∏–ª–∏–Ω</span>
                    </div>
                  </div>
                  <Play size={24} className="text-purple-400 group-hover:text-purple-300 transition-colors" />
                </div>
              </button>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full h-full bg-gradient-to-b from-gray-900 via-gray-800 to-gray-900 flex flex-col relative overflow-hidden">
      <div className="absolute inset-0 opacity-10">
        <img 
          src="keys/dawn-renewal?prompt=peaceful%20ocean%20waves%20dawn%20light%20calm%20serenity%20hope%20new%20beginning" 
          alt="" 
          className="w-full h-full object-cover"
        />
      </div>
      
      <div className="relative z-10 flex-1 flex flex-col">
        <div className="p-6 pb-0">
          <div className="flex items-center justify-between mb-2">
            <div className="w-10 h-10 rounded-full bg-gradient-to-br from-emerald-400 to-teal-400 flex items-center justify-center shadow-lg shadow-emerald-500/30">
              <div className="w-8 h-8 rounded-full bg-gray-900 flex items-center justify-center">
                <div className="w-4 h-4 bg-gradient-to-t from-emerald-400 to-white rounded-full"></div>
              </div>
            </div>
            <button 
              onClick={() => setShowSettings(true)}
              className="text-gray-400 hover:text-white transition-colors"
            >
              <Settings size={24} />
            </button>
          </div>
          <h1 className="text-2xl font-black text-white tracking-tight">30 –î–ù–Ü–í –ë–ï–ó –ê–õ–ö–û–ì–û–õ–Æ</h1>
        </div>

        <div className="flex-1 flex flex-col items-center justify-center px-6 space-y-8">
          <div className="relative w-64 h-64">
            <svg className="w-full h-full transform -rotate-90">
              <circle
                cx="128"
                cy="128"
                r="110"
                stroke="rgba(16, 185, 129, 0.1)"
                strokeWidth="12"
                fill="none"
              />
              <circle
                cx="128"
                cy="128"
                r="110"
                stroke="url(#gradient)"
                strokeWidth="12"
                fill="none"
                strokeDasharray={`${(progress / 100) * 691} 691`}
                strokeLinecap="round"
                className="transition-all duration-1000"
              />
              <defs>
                <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                  <stop offset="0%" stopColor="#10b981" />
                  <stop offset="100%" stopColor="#14b8a6" />
                </linearGradient>
              </defs>
            </svg>
            <div className="absolute inset-0 flex flex-col items-center justify-center">
              <div className="text-7xl font-black text-transparent bg-clip-text bg-gradient-to-r from-emerald-300 to-teal-400">
                {days}
              </div>
              <div className="text-sm font-bold text-gray-400 uppercase tracking-wider mt-2">
                {days === 1 ? '–î–µ–Ω—å' : days < 5 ? '–î–Ω—ñ' : '–î–Ω—ñ–≤'}
              </div>
            </div>
          </div>

          <div className="text-center space-y-2">
            <p className="text-xl font-light text-gray-300">–¢–∏ —á–∏—Å—Ç–∏–π(–∞) –≤–∂–µ:</p>
            <p className="text-3xl font-black text-white">{days} {days === 1 ? '–¥–µ–Ω—å' : days < 5 ? '–¥–Ω—ñ' : '–¥–Ω—ñ–≤'}</p>
          </div>

          <div className="w-full bg-gray-800/30 backdrop-blur border border-emerald-500/20 rounded-2xl p-6">
            <div className="flex items-start gap-3">
              <Heart className="text-emerald-400 mt-1 flex-shrink-0" size={24} />
              <p className="text-lg text-gray-200 leading-relaxed italic">"{todayQuote}"</p>
            </div>
          </div>

          <button
            onClick={() => setShowAddNote(true)}
            className="w-full px-8 py-5 bg-gradient-to-r from-emerald-500 to-teal-500 rounded-2xl text-white font-bold text-lg shadow-lg shadow-emerald-500/30 hover:scale-105 transition-all flex items-center justify-center gap-2"
          >
            <Plus size={24} />
            –ó–∞–ø–∏—Å–∞—Ç–∏ –¥–µ–Ω—å
          </button>
        </div>

        <div className="grid grid-cols-4 gap-2 p-6 bg-gray-900/50 backdrop-blur border-t border-gray-800">
          <button 
            onClick={() => setShowNotes(true)}
            className="flex flex-col items-center gap-2 py-4 rounded-xl hover:bg-gray-800/50 transition-all"
          >
            <BookOpen size={24} className="text-gray-400" />
            <span className="text-xs text-gray-400 font-medium">–ó–∞–ø–∏—Å–∏</span>
          </button>
          <button 
            onClick={() => setShowMeditation(true)}
            className="flex flex-col items-center gap-2 py-4 rounded-xl hover:bg-gray-800/50 transition-all"
          >
            <Sparkles size={24} className="text-purple-400" />
            <span className="text-xs text-purple-400 font-medium">–ú–µ–¥–∏—Ç–∞—Ü—ñ—ó</span>
          </button>
          <button className="flex flex-col items-center gap-2 py-4 rounded-xl hover:bg-gray-800/50 transition-all">
            <Calendar size={24} className="text-gray-400" />
            <span className="text-xs text-gray-400 font-medium">–ö–∞–ª–µ–Ω–¥–∞—Ä</span>
          </button>
          <button className="flex flex-col items-center gap-2 py-4 rounded-xl hover:bg-gray-800/50 transition-all">
            <Share2 size={24} className="text-gray-400" />
            <span className="text-xs text-gray-400 font-medium">–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è</span>
          </button>
        </div>
      </div>
    </div>
  );
}

function useStoredState(key, initialValue) {
  const storageKey = `sobriety_${key}`;
  
  const [state, setState] = useState(() => {
    if (typeof window === 'undefined') return initialValue;
    try {
      const item = window.localStorage.getItem(storageKey);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error('Error loading from localStorage:', error);
      return initialValue;
    }
  });

  useEffect(() => {
    if (typeof window === 'undefined') return;
    try {
      window.localStorage.setItem(storageKey, JSON.stringify(state));
    } catch (error) {
      console.error('Error saving to localStorage:', error);
    }
  }, [state, storageKey]);

  return [state, setState];
}
ReactDOM.render(React.createElement(SobrietyApp), document.getElementById('root'));